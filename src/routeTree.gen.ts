/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as errors503RouteImport } from './routes/(errors)/503'
import { Route as errors500RouteImport } from './routes/(errors)/500'
import { Route as errors404RouteImport } from './routes/(errors)/404'
import { Route as errors403RouteImport } from './routes/(errors)/403'
import { Route as errors401RouteImport } from './routes/(errors)/401'
import { Route as authSignOutRouteImport } from './routes/(auth)/sign-out'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as AuthenticatedTasksIndexRouteImport } from './routes/_authenticated/tasks/index'
import { Route as AuthenticatedTasksMyRouteRouteImport } from './routes/_authenticated/tasks/my/route'
import { Route as AuthenticatedTasksAllRouteRouteImport } from './routes/_authenticated/tasks/all/route'
import { Route as AuthenticatedTasksMyIndexRouteImport } from './routes/_authenticated/tasks/my/index'
import { Route as AuthenticatedTasksAllIndexRouteImport } from './routes/_authenticated/tasks/all/index'
import { Route as AuthenticatedTasksTaskIdIndexRouteImport } from './routes/_authenticated/tasks/$task-id/index'
import { Route as AuthenticatedTasksTaskIdEditRouteImport } from './routes/_authenticated/tasks/$task-id/edit'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const errors503Route = errors503RouteImport.update({
  id: '/(errors)/503',
  path: '/503',
  getParentRoute: () => rootRouteImport,
} as any)
const errors500Route = errors500RouteImport.update({
  id: '/(errors)/500',
  path: '/500',
  getParentRoute: () => rootRouteImport,
} as any)
const errors404Route = errors404RouteImport.update({
  id: '/(errors)/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const errors403Route = errors403RouteImport.update({
  id: '/(errors)/403',
  path: '/403',
  getParentRoute: () => rootRouteImport,
} as any)
const errors401Route = errors401RouteImport.update({
  id: '/(errors)/401',
  path: '/401',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignOutRoute = authSignOutRouteImport.update({
  id: '/(auth)/sign-out',
  path: '/sign-out',
  getParentRoute: () => rootRouteImport,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedTasksIndexRoute = AuthenticatedTasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedTasksMyRouteRoute =
  AuthenticatedTasksMyRouteRouteImport.update({
    id: '/tasks/my',
    path: '/tasks/my',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTasksAllRouteRoute =
  AuthenticatedTasksAllRouteRouteImport.update({
    id: '/tasks/all',
    path: '/tasks/all',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTasksMyIndexRoute =
  AuthenticatedTasksMyIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedTasksMyRouteRoute,
  } as any)
const AuthenticatedTasksAllIndexRoute =
  AuthenticatedTasksAllIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedTasksAllRouteRoute,
  } as any)
const AuthenticatedTasksTaskIdIndexRoute =
  AuthenticatedTasksTaskIdIndexRouteImport.update({
    id: '/tasks/$task-id/',
    path: '/tasks/$task-id/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedTasksTaskIdEditRoute =
  AuthenticatedTasksTaskIdEditRouteImport.update({
    id: '/tasks/$task-id/edit',
    path: '/tasks/$task-id/edit',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/sign-in': typeof authSignInRoute
  '/sign-out': typeof authSignOutRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/': typeof AuthenticatedIndexRoute
  '/tasks/all': typeof AuthenticatedTasksAllRouteRouteWithChildren
  '/tasks/my': typeof AuthenticatedTasksMyRouteRouteWithChildren
  '/tasks': typeof AuthenticatedTasksIndexRoute
  '/tasks/$task-id/edit': typeof AuthenticatedTasksTaskIdEditRoute
  '/tasks/$task-id': typeof AuthenticatedTasksTaskIdIndexRoute
  '/tasks/all/': typeof AuthenticatedTasksAllIndexRoute
  '/tasks/my/': typeof AuthenticatedTasksMyIndexRoute
}
export interface FileRoutesByTo {
  '/sign-in': typeof authSignInRoute
  '/sign-out': typeof authSignOutRoute
  '/401': typeof errors401Route
  '/403': typeof errors403Route
  '/404': typeof errors404Route
  '/500': typeof errors500Route
  '/503': typeof errors503Route
  '/': typeof AuthenticatedIndexRoute
  '/tasks': typeof AuthenticatedTasksIndexRoute
  '/tasks/$task-id/edit': typeof AuthenticatedTasksTaskIdEditRoute
  '/tasks/$task-id': typeof AuthenticatedTasksTaskIdIndexRoute
  '/tasks/all': typeof AuthenticatedTasksAllIndexRoute
  '/tasks/my': typeof AuthenticatedTasksMyIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-out': typeof authSignOutRoute
  '/(errors)/401': typeof errors401Route
  '/(errors)/403': typeof errors403Route
  '/(errors)/404': typeof errors404Route
  '/(errors)/500': typeof errors500Route
  '/(errors)/503': typeof errors503Route
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/tasks/all': typeof AuthenticatedTasksAllRouteRouteWithChildren
  '/_authenticated/tasks/my': typeof AuthenticatedTasksMyRouteRouteWithChildren
  '/_authenticated/tasks/': typeof AuthenticatedTasksIndexRoute
  '/_authenticated/tasks/$task-id/edit': typeof AuthenticatedTasksTaskIdEditRoute
  '/_authenticated/tasks/$task-id/': typeof AuthenticatedTasksTaskIdIndexRoute
  '/_authenticated/tasks/all/': typeof AuthenticatedTasksAllIndexRoute
  '/_authenticated/tasks/my/': typeof AuthenticatedTasksMyIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/sign-in'
    | '/sign-out'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/tasks/all'
    | '/tasks/my'
    | '/tasks'
    | '/tasks/$task-id/edit'
    | '/tasks/$task-id'
    | '/tasks/all/'
    | '/tasks/my/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/sign-in'
    | '/sign-out'
    | '/401'
    | '/403'
    | '/404'
    | '/500'
    | '/503'
    | '/'
    | '/tasks'
    | '/tasks/$task-id/edit'
    | '/tasks/$task-id'
    | '/tasks/all'
    | '/tasks/my'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/sign-in'
    | '/(auth)/sign-out'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/'
    | '/_authenticated/tasks/all'
    | '/_authenticated/tasks/my'
    | '/_authenticated/tasks/'
    | '/_authenticated/tasks/$task-id/edit'
    | '/_authenticated/tasks/$task-id/'
    | '/_authenticated/tasks/all/'
    | '/_authenticated/tasks/my/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  authSignInRoute: typeof authSignInRoute
  authSignOutRoute: typeof authSignOutRoute
  errors401Route: typeof errors401Route
  errors403Route: typeof errors403Route
  errors404Route: typeof errors404Route
  errors500Route: typeof errors500Route
  errors503Route: typeof errors503Route
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-out': {
      id: '/(auth)/sign-out'
      path: '/sign-out'
      fullPath: '/sign-out'
      preLoaderRoute: typeof authSignOutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/tasks/': {
      id: '/_authenticated/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AuthenticatedTasksIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tasks/my': {
      id: '/_authenticated/tasks/my'
      path: '/tasks/my'
      fullPath: '/tasks/my'
      preLoaderRoute: typeof AuthenticatedTasksMyRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tasks/all': {
      id: '/_authenticated/tasks/all'
      path: '/tasks/all'
      fullPath: '/tasks/all'
      preLoaderRoute: typeof AuthenticatedTasksAllRouteRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tasks/my/': {
      id: '/_authenticated/tasks/my/'
      path: '/'
      fullPath: '/tasks/my/'
      preLoaderRoute: typeof AuthenticatedTasksMyIndexRouteImport
      parentRoute: typeof AuthenticatedTasksMyRouteRoute
    }
    '/_authenticated/tasks/all/': {
      id: '/_authenticated/tasks/all/'
      path: '/'
      fullPath: '/tasks/all/'
      preLoaderRoute: typeof AuthenticatedTasksAllIndexRouteImport
      parentRoute: typeof AuthenticatedTasksAllRouteRoute
    }
    '/_authenticated/tasks/$task-id/': {
      id: '/_authenticated/tasks/$task-id/'
      path: '/tasks/$task-id'
      fullPath: '/tasks/$task-id'
      preLoaderRoute: typeof AuthenticatedTasksTaskIdIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/tasks/$task-id/edit': {
      id: '/_authenticated/tasks/$task-id/edit'
      path: '/tasks/$task-id/edit'
      fullPath: '/tasks/$task-id/edit'
      preLoaderRoute: typeof AuthenticatedTasksTaskIdEditRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedTasksAllRouteRouteChildren {
  AuthenticatedTasksAllIndexRoute: typeof AuthenticatedTasksAllIndexRoute
}

const AuthenticatedTasksAllRouteRouteChildren: AuthenticatedTasksAllRouteRouteChildren =
  {
    AuthenticatedTasksAllIndexRoute: AuthenticatedTasksAllIndexRoute,
  }

const AuthenticatedTasksAllRouteRouteWithChildren =
  AuthenticatedTasksAllRouteRoute._addFileChildren(
    AuthenticatedTasksAllRouteRouteChildren,
  )

interface AuthenticatedTasksMyRouteRouteChildren {
  AuthenticatedTasksMyIndexRoute: typeof AuthenticatedTasksMyIndexRoute
}

const AuthenticatedTasksMyRouteRouteChildren: AuthenticatedTasksMyRouteRouteChildren =
  {
    AuthenticatedTasksMyIndexRoute: AuthenticatedTasksMyIndexRoute,
  }

const AuthenticatedTasksMyRouteRouteWithChildren =
  AuthenticatedTasksMyRouteRoute._addFileChildren(
    AuthenticatedTasksMyRouteRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedTasksAllRouteRoute: typeof AuthenticatedTasksAllRouteRouteWithChildren
  AuthenticatedTasksMyRouteRoute: typeof AuthenticatedTasksMyRouteRouteWithChildren
  AuthenticatedTasksIndexRoute: typeof AuthenticatedTasksIndexRoute
  AuthenticatedTasksTaskIdEditRoute: typeof AuthenticatedTasksTaskIdEditRoute
  AuthenticatedTasksTaskIdIndexRoute: typeof AuthenticatedTasksTaskIdIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedTasksAllRouteRoute: AuthenticatedTasksAllRouteRouteWithChildren,
  AuthenticatedTasksMyRouteRoute: AuthenticatedTasksMyRouteRouteWithChildren,
  AuthenticatedTasksIndexRoute: AuthenticatedTasksIndexRoute,
  AuthenticatedTasksTaskIdEditRoute: AuthenticatedTasksTaskIdEditRoute,
  AuthenticatedTasksTaskIdIndexRoute: AuthenticatedTasksTaskIdIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  authSignInRoute: authSignInRoute,
  authSignOutRoute: authSignOutRoute,
  errors401Route: errors401Route,
  errors403Route: errors403Route,
  errors404Route: errors404Route,
  errors500Route: errors500Route,
  errors503Route: errors503Route,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
