/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieve a user by their ID
         */
        get: operations["getUserById"];
        /**
         * Update user
         * @description Update an existing user
         */
        put: operations["updateUser"];
        post?: never;
        /**
         * Delete user
         * @description Delete a user by ID
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-shifts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserShiftById"];
        put: operations["updateUserShift"];
        post?: never;
        delete: operations["deleteUserShift"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update user flight shift
         * @description Update user flight shift by id
         */
        put: operations["updateUserFlightShift"];
        post?: never;
        /**
         * Delete user flight shift by id
         * @description Delete user flight shift by id
         */
        delete: operations["deleteUserFlightShift"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lấy chi tiết task
         * @description Lấy chi tiết một công việc theo id
         */
        get: operations["getTaskDetailById"];
        /**
         * Cập nhật task
         * @description Cập nhật một công việc theo id
         */
        put: operations["updateTask"];
        post?: never;
        /**
         * Xoá task
         * @description Xoá một công việc theo id
         */
        delete: operations["deleteTask"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/task-documents/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateDocument"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shifts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getShiftById"];
        put: operations["updateShift"];
        post?: never;
        delete: operations["deleteShift"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRoleById"];
        put: operations["updateRole"];
        post?: never;
        delete: operations["deleteRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFlightById"];
        put: operations["updateFlight"];
        post?: never;
        delete: operations["deleteFlight"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-sessions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEvaluationSessionById"];
        put: operations["updateEvaluationSession"];
        post?: never;
        delete: operations["deleteEvaluationSession"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-issues/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getIssueById"];
        put: operations["updateIssue"];
        post?: never;
        delete: operations["deleteIssue"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-issues/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateIssueStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEvaluationGroupById"];
        put: operations["updateEvaluationGroup"];
        post?: never;
        delete: operations["deleteEvaluationGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDocumentById"];
        put: operations["updateDocument_1"];
        post?: never;
        delete: operations["deleteDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/attachments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateAttachment"];
        post?: never;
        delete: operations["deleteAttachment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assignments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAssignmentById"];
        put: operations["updateAssignment"];
        post?: never;
        delete: operations["deleteAssignment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/airports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAirportById"];
        put: operations["updateAirport"];
        post?: never;
        delete: operations["deleteAirport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getActivity"];
        put: operations["updateActivity"];
        post?: never;
        delete: operations["deleteActivity"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/{id}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["pinActivity"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Retrieve a list of all users
         */
        get: operations["getAllUsers"];
        put?: never;
        /**
         * Create user
         * @description Create a new user
         */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/logout-cleanup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["logoutCleanup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/expo-push-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Expo Push Token
         * @description Save Expo Push Token for the current user
         */
        post: operations["saveExpoPushToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/device-token/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["removeDeviceToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-shifts/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["assignShiftToUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-shifts/apply-multi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["applyShiftToUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply user flight shift
         * @description Apply a new user flight shift
         */
        post: operations["applyFlightShift"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all teams
         * @description Retrieve a list of all teams
         */
        get: operations["getAllTeams"];
        put?: never;
        /**
         * Create a new team
         * @description Create a new team with the provided details
         */
        post: operations["createTeam"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lấy danh sách task
         * @description Lấy danh sách tất cả công việc
         */
        get: operations["getAllTaskDetails"];
        put?: never;
        /**
         * Tạo task
         * @description Tạo mới một công việc
         */
        post: operations["createTask"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/task-documents/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["attachDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllShifts"];
        put?: never;
        post: operations["createShift"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllRoles"];
        put?: never;
        post: operations["createRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/read/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["markAsRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllFlights"];
        put?: never;
        post: operations["createFlight"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllEvaluationSessions"];
        put?: never;
        post: operations["createEvaluationSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllIssues"];
        put?: never;
        post: operations["createIssue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllEvaluationGroups"];
        put?: never;
        post: operations["createEvaluationGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllDocuments"];
        put?: never;
        post: operations["createDocument"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User registration
         * @description Register a new user
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user and return JWT token
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/attachments/document/{documentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAttachmentsByDocument"];
        put?: never;
        post: operations["addAttachment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createAssignment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/airports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllAirports"];
        put?: never;
        post: operations["createAirport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllActivities"];
        put?: never;
        post: operations["createActivity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/{id}/participants": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["addParticipants"];
        delete: operations["removeParticipant"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/{id}/times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateFlightTimes"];
        trace?: never;
    };
    "/api/flights/{id}/actual-time-notify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["updateActualTimeAndNotify"];
        trace?: never;
    };
    "/api/users/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search users
         * @description Search users by keyword (name or email)
         */
        get: operations["searchUsersByKeyword"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user
         * @description Get the current user based on token
         */
        get: operations["getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter users
         * @description Filter users by team, unit, or search text
         */
        get: operations["filterUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-shifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllUserShifts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-shifts/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSchedulesByCriteria"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-shifts/filter-by-user-and-range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["filterByUserAndRange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all user flight shifts
         * @description Retrieve a list of all user flight shifts (DTO only)
         */
        get: operations["getAllUserFlightShifts"];
        put?: never;
        post?: never;
        /**
         * Remove user flight assignment
         * @description Remove a user flight assignment
         */
        delete: operations["removeFlightAssignment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/shifts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user flight shifts by flight and date
         * @description Retrieve user flight shifts by flight and date
         */
        get: operations["getShiftsByFlightAndDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/shifts/available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available user flight shifts
         * @description Retrieve available user flight shifts
         */
        get: operations["getAvailableShifts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/shifts/assigned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get assigned user flight shifts
         * @description Retrieve assigned user flight shifts
         */
        get: operations["getAssignedShifts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/isAssigned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if user is assigned to flight
         * @description Check if a user is assigned to a flight on a specific date
         */
        get: operations["isUserAssigned"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/filter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter user flight shifts
         * @description Filter user flight shifts by criteria
         */
        get: operations["getFlightSchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/filter-schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Filter user flight shifts
         * @description Filter user flight shifts by date, team, unit
         */
        get: operations["filterUserFlightShifts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/by-user/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user flight shifts by user
         * @description Retrieve user flight shifts by user (DTO only)
         */
        get: operations["getShiftsByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user-flight-shifts/by-date": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user flight shifts by date
         * @description Retrieve user flight shifts by date (DTO only)
         */
        get: operations["getShiftsByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all units
         * @description Retrieve a list of all units or units by teamId
         */
        get: operations["getUnits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/unread-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countUnread"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/today": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getTodayFlights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchFlights"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/searchByDate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchFlightByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/searchByDateAndKeyword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchFlightByDateAndKeyword"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/flights/live-tracking-group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLiveTrackingGroup"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/evaluation-issues/session/{sessionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getIssuesBySession"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assignments/task/{taskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAssignmentsByTaskId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchActivitiesByMonthYear"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/search-by-range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getActivitiesByDateRange"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/search-by-date": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getActivitiesByDate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/pinned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPinnedActivities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/activities/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getMyActivities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Trang chủ API */
        get: operations["home"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/task-documents/remove": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["removeDocument"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteNotification"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Airport: {
            /** Format: int64 */
            id?: number;
            airportCode: string;
            airportName: string;
            latitude: number;
            longitude: number;
            city: string;
            country: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Flight: {
            /** Format: int64 */
            id?: number;
            flightNumber: string;
            departureAirport?: components["schemas"]["Airport"];
            arrivalAirport?: components["schemas"]["Airport"];
            departureTime: components["schemas"]["LocalTime"];
            arrivalTime: components["schemas"]["LocalTime"];
            /** Format: date */
            flightDate: string;
            actualDepartureTime?: components["schemas"]["LocalTime"];
            actualArrivalTime?: components["schemas"]["LocalTime"];
            actualDepartureTimeAtArrival?: components["schemas"]["LocalTime"];
            note?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        LocalTime: {
            /** Format: int32 */
            hour?: number;
            /** Format: int32 */
            minute?: number;
            /** Format: int32 */
            second?: number;
            /** Format: int32 */
            nano?: number;
        };
        Role: {
            /** Format: int32 */
            id?: number;
            roleName?: string;
            users?: components["schemas"]["User"][];
        };
        Team: {
            /** Format: int32 */
            id?: number;
            teamName?: string;
            units?: components["schemas"]["Unit"][];
            users?: components["schemas"]["User"][];
        };
        Unit: {
            /** Format: int32 */
            id?: number;
            unitName?: string;
            team?: components["schemas"]["Team"];
            users?: components["schemas"]["User"][];
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        User: {
            /** Format: int32 */
            id?: number;
            name?: string;
            email?: string;
            password?: string;
            expoPushToken?: string;
            role?: components["schemas"]["Role"];
            team?: components["schemas"]["Team"];
            unit?: components["schemas"]["Unit"];
            userFlightShifts?: components["schemas"]["UserFlightShift"][];
            userPermissions?: components["schemas"]["UserPermission"][];
        };
        UserFlightShift: {
            /** Format: int32 */
            id?: number;
            user?: components["schemas"]["User"];
            flight?: components["schemas"]["Flight"];
            /** Format: date */
            shiftDate?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserPermission: {
            /** Format: int32 */
            id?: number;
            user?: components["schemas"]["User"];
            permissionCode?: string;
            value?: boolean;
        };
        /** @description API response for update user, data is User */
        ApiUpdateUserResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["User"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        AssignShiftRequest: {
            /** Format: int32 */
            userId?: number;
            shiftDate?: string;
            /** Format: int32 */
            shiftId?: number;
        };
        UpdateUserFlightShiftRequest: {
            /** Format: date */
            shiftDate?: string;
            /** Format: int64 */
            flightId?: number;
        };
        /** @description API response for update user flight shift, data is UserFlightShiftResponseDTO */
        ApiUpdateUserFlightShiftResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["UserFlightShiftResponseDTO"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        UserFlightShiftResponseDTO: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            userId?: number;
            userName?: string;
            /** Format: int64 */
            flightId?: number;
            flightNumber?: string;
            /** Format: date */
            shiftDate?: string;
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        TaskDTO: {
            /** Format: int32 */
            id?: number;
            content?: string;
            instructions?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: int32 */
            createdBy?: number;
        };
        /** @description API response for a single task, data is TaskDTO */
        ApiTaskResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["TaskDTO"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        AttachmentDTO: {
            /** Format: int32 */
            id?: number;
            filePath?: string;
            fileName?: string;
            /** Format: int64 */
            fileSize?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        DocumentDTO: {
            /** Format: int32 */
            id?: number;
            documentType?: string;
            content?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            attachments?: components["schemas"]["AttachmentDTO"][];
        };
        Shift: {
            /** Format: int32 */
            id?: number;
            shiftCode?: string;
            startTime?: components["schemas"]["LocalTime"];
            endTime?: components["schemas"]["LocalTime"];
            location?: string;
            description?: string;
            team?: components["schemas"]["Team"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RoleDTO: {
            /** Format: int32 */
            id?: number;
            roleName?: string;
        };
        AirportDTO: {
            airportCode?: string;
            airportName?: string;
        };
        FlightDTO: {
            /** Format: int64 */
            id?: number;
            flightNumber?: string;
            departureAirport?: components["schemas"]["AirportDTO"];
            arrivalAirport?: components["schemas"]["AirportDTO"];
            departureTime?: components["schemas"]["LocalTime"];
            arrivalTime?: components["schemas"]["LocalTime"];
            /** Format: date */
            flightDate?: string;
            actualDepartureTime?: components["schemas"]["LocalTime"];
            actualArrivalTime?: components["schemas"]["LocalTime"];
            actualDepartureTimeAtArrival?: components["schemas"]["LocalTime"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            note?: string;
        };
        EvaluationAssignmentDTO: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            evaluationPeriodId?: number;
            targetType?: string;
            /** Format: int32 */
            targetId?: number;
            /** Format: date-time */
            createdAt?: string;
        };
        EvaluationSessionDTO: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            evaluationGroupId?: number;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            assignments?: components["schemas"]["EvaluationAssignmentDTO"][];
        };
        EvaluationIssueDTO: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            evaluationSessionId?: number;
            targetType?: string;
            /** Format: int32 */
            targetId?: number;
            issueContent?: string;
            /** Format: date */
            requestedResolutionDate?: string;
            isResolved?: boolean;
            /** Format: date */
            resolutionDate?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            documentIds?: number[];
        };
        StatusUpdateRequest: {
            isResolved?: boolean;
            /** Format: date */
            resolutionDate?: string;
        };
        EvaluationGroupDTO: {
            /** Format: int32 */
            id?: number;
            groupName?: string;
            description?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        /** @description Response chuẩn cho tất cả API */
        ApiResponseCustom: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: Record<string, never>;
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        AssignmentDTO: {
            /** Format: int32 */
            assignmentId?: number;
            /** Format: int32 */
            taskId?: number;
            recipientType?: string;
            /** Format: date-time */
            assignedAt?: string;
            /** Format: date-time */
            dueAt?: string;
            /** Format: date-time */
            completedAt?: string;
            /** Format: int32 */
            status?: number;
            note?: string;
            assignedByUser?: components["schemas"]["UserDTO"];
            completedByUser?: components["schemas"]["UserDTO"];
            recipientUser?: components["schemas"]["UserDTO"];
        };
        UserDTO: {
            /**
             * Format: int32
             * @description ID of the user
             */
            id: number;
            /** @description Name of the user */
            name: string;
            /** @description Email of the user */
            email: string;
            /** @description Role name of the user */
            roleName: string;
            /** @description Team name of the user */
            teamName: string;
            /** @description Unit name of the user */
            unitName: string;
            /**
             * Format: int32
             * @description Role ID of the user
             */
            roleId: number;
            /**
             * Format: int32
             * @description Team ID of the user
             */
            teamId: number;
            /**
             * Format: int32
             * @description Unit ID of the user
             */
            unitId: number;
            canCreateActivity?: boolean;
            permissions?: string[];
        };
        ActivityDTO: {
            /** Format: int64 */
            id?: number;
            name: string;
            location: string;
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            notes?: string;
            participants?: components["schemas"]["ActivityParticipantDTO"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            pinned?: boolean;
        };
        ActivityParticipantDTO: {
            /** Format: int64 */
            id?: number;
            participantType?: string;
            /** Format: int64 */
            participantId?: number;
            participantName?: string;
        };
        /** @description API response for create user, data is User */
        ApiCreateUserResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["User"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        ApplyShiftMultiDTO: {
            /** Format: date */
            shiftDate?: string;
            userIds?: number[];
            shiftCode?: string;
        };
        ApplyFlightShiftRequest: {
            /** Format: int64 */
            flightId?: number;
            userIds?: number[];
            /** Format: date */
            shiftDate?: string;
        };
        /** @description API response for creating user flight shift, data is null */
        ApiCreateUserFlightShiftResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: Record<string, never>;
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        TeamDTO: {
            /** Format: int32 */
            id?: number;
            teamName?: string;
        };
        ApiResponseTeamDTO: {
            message?: string;
            /** Format: int32 */
            statusCode?: number;
            data?: components["schemas"]["TeamDTO"];
            success?: boolean;
        };
        AssignmentRequest: {
            /** Format: int32 */
            recipientId?: number;
            recipientType?: string;
            /** Format: date-time */
            dueAt?: string;
            note?: string;
        };
        CreateTaskRequest: {
            content?: string;
            instructions?: string;
            notes?: string;
            assignments?: components["schemas"]["AssignmentRequest"][];
            documentIds?: number[];
        };
        RegisterRequest: {
            name: string;
            email: string;
            password: string;
            /** Format: int32 */
            roleId?: number;
            /** Format: int32 */
            teamId?: number;
            /** Format: int32 */
            unitId?: number;
        };
        /** @description API response for register, data is RegisterResponse */
        ApiRegisterResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["RegisterResponse"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        RegisterResponse: {
            /** Format: int32 */
            id?: number;
            name?: string;
            email?: string;
            role?: components["schemas"]["RoleDTO"];
            team?: components["schemas"]["TeamDTO"];
            unit?: components["schemas"]["UnitDTO"];
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        UnitDTO: {
            /** Format: int32 */
            id?: number;
            unitName?: string;
            /** Format: int32 */
            teamId?: number;
        };
        /**
         * @description Response cho các trường hợp lỗi
         * @example {
         *       "message": "Không tìm thấy tài nguyên",
         *       "statusCode": 404,
         *       "errorDetails": null,
         *       "success": false
         *     }
         */
        ApiErrorResponse: {
            /**
             * @description Thông báo lỗi
             * @example Không tìm thấy tài nguyên
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 404
             */
            statusCode?: number;
            /**
             * @description Chi tiết lỗi (nếu có)
             * @example null
             */
            errorDetails?: Record<string, never> | null;
            /**
             * @description Trạng thái thành công hay thất bại
             * @example false
             */
            success?: boolean;
        };
        LoginRequest: {
            email: string;
            password: string;
        };
        /** @description API response for login, data is LoginResponse */
        ApiLoginResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["LoginResponse"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        LoginResponse: {
            accessToken?: string;
            tokenType?: string;
            /** Format: int64 */
            expiresIn?: number;
        };
        FlightTimeUpdateRequest: {
            actualDepartureTime?: string;
            actualArrivalTime?: string;
            actualDepartureTimeAtArrival?: string;
            eventType?: string;
        };
        /** @description API response for all users, data is List<UserDTO> */
        ApiAllUsersResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for get user by ID, data is User */
        ApiUserByIdResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["User"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for search users, data is List<UserDTO> */
        ApiSearchUsersResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for current user, data is UserDTO */
        ApiMeResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["UserDTO"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for filter users, data is List<UserDTO> */
        ApiFilterUsersResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        UserShiftDTO: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            userId?: number;
            userName?: string;
            shiftCode?: string;
            startTime?: string;
            endTime?: string;
            user?: components["schemas"]["UserDTO"];
            /** Format: date */
            shiftDate?: string;
            /** Format: int32 */
            shiftId?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ScheduleDTO: {
            /** Format: int32 */
            scheduleId?: number;
            /** Format: date */
            shiftDate?: string;
            /** Format: int32 */
            userId?: number;
            userName?: string;
            /** Format: int32 */
            teamId?: number;
            teamName?: string;
            /** Format: int32 */
            unitId?: number;
            unitName?: string;
            /** Format: int32 */
            shiftId?: number;
            shiftCode?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            location?: string;
            description?: string;
        };
        /** @description API response for all user flight shifts, data is List<UserFlightShiftResponseDTO> */
        ApiAllUserFlightShiftsResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for user flight shifts by flight and date, data is List<UserFlightShiftResponseDTO> */
        ApiUserFlightShiftsByFlightAndDateResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for available user flight shifts, data is List<UserFlightShiftResponseDTO> */
        ApiAvailableUserFlightShiftsResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for assigned user flight shifts, data is List<UserFlightShiftResponseDTO> */
        ApiAssignedUserFlightShiftsResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for checking if user is assigned to flight, data is Map<String, Boolean> */
        ApiCheckUserAssignedFlightResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: {
                [key: string]: boolean;
            };
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for filtering user flight shifts, data is List<UserFlightShiftResponseSearchDTO> */
        ApiFilterUserFlightShiftsResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseSearchDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        UserFlightShiftResponseSearchDTO: {
            /** Format: int32 */
            scheduleId?: number;
            userName?: string;
            teamName?: string;
            unitName?: string;
            /** Format: date */
            shiftDate?: string;
            flightNumber?: string;
            departureTime?: components["schemas"]["LocalTime"];
            arrivalTime?: components["schemas"]["LocalTime"];
            departureAirportCode?: string;
            arrivalAirportCode?: string;
            /** Format: int64 */
            flightId?: number;
            /** Format: int32 */
            userId?: number;
        };
        /** @description API response for user flight shifts by user, data is List<UserFlightShiftResponseDTO> */
        ApiUserFlightShiftsByUserResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for user flight shifts by date, data is List<UserFlightShiftResponseDTO> */
        ApiUserFlightShiftsByDateResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UserFlightShiftResponseDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for all units, data is List<UnitDTO> */
        ApiAllUnitsResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["UnitDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for all teams, data is List<TeamDTO> */
        ApiAllTeamsResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["TeamDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for all tasks, data is List<TaskDetailDTO> */
        ApiAllTasksResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: components["schemas"]["TaskDetailDTO"][];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        DocumentDetailDTO: {
            /** Format: int32 */
            id?: number;
            documentType?: string;
            content?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            attachments?: components["schemas"]["AttachmentDTO"][];
        };
        /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
        TaskDetailDTO: {
            /** Format: int32 */
            id?: number;
            content?: string;
            instructions?: string;
            notes?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdByUser?: components["schemas"]["UserDTO"];
            assignments?: components["schemas"]["AssignmentDTO"][];
            documents?: components["schemas"]["DocumentDetailDTO"][];
        };
        /** @description API response for a single task detail, data is TaskDetailDTO */
        ApiTaskDetailResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            data?: components["schemas"]["TaskDetailDTO"];
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        ShiftDTO: {
            /** Format: int32 */
            id?: number;
            shiftCode?: string;
            startTime?: components["schemas"]["LocalTime"];
            endTime?: components["schemas"]["LocalTime"];
            location?: string;
            description?: string;
            /** Format: int32 */
            teamId?: number;
            teamName?: string;
        };
        Notification: {
            /** Format: int32 */
            id?: number;
            /** Format: int32 */
            userId?: number;
            type?: string;
            title?: string;
            content?: string;
            /** Format: int32 */
            relatedId?: number;
            /** Format: date-time */
            createdAt?: string;
            isRead?: boolean;
        };
        /** @description API response for delete user, data is Void */
        ApiDeleteUserResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: Record<string, never>;
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
        /** @description API response for deleting user flight shift, data is null */
        ApiDeleteUserFlightShiftResponse: {
            /**
             * @description Thông báo kết quả
             * @example Thành công
             */
            message?: string;
            /**
             * Format: int32
             * @description Mã trạng thái HTTP
             * @example 200
             */
            statusCode?: number;
            /** @description Dữ liệu trả về (object, list hoặc null). Kiểu thực tế phụ thuộc vào API cụ thể. */
            data?: Record<string, never>;
            /**
             * @description Trạng thái thành công hay thất bại
             * @example true
             */
            success?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUserById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUserByIdResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUserByIdResponse"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUpdateUserResponse"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUpdateUserResponse"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiDeleteUserResponse"];
                };
            };
        };
    };
    getUserShiftById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserShiftDTO"];
                };
            };
        };
    };
    updateUserShift: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignShiftRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteUserShift: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateUserFlightShift: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserFlightShiftRequest"];
            };
        };
        responses: {
            /** @description Successfully updated user flight shift */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUpdateUserFlightShiftResponse"];
                };
            };
        };
    };
    deleteUserFlightShift: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted user flight shift */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiDeleteUserFlightShiftResponse"];
                };
            };
        };
    };
    getTaskDetailById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiTaskDetailResponse"];
                };
            };
            /** @description Không tìm thấy công việc */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiTaskDetailResponse"];
                };
            };
        };
    };
    updateTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TaskDTO"];
            };
        };
        responses: {
            /** @description Cập nhật thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiTaskResponse"];
                };
            };
            /** @description Không tìm thấy công việc */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiTaskResponse"];
                };
            };
        };
    };
    deleteTask: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Xoá thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiTaskResponse"];
                };
            };
        };
    };
    updateDocument: {
        parameters: {
            query: {
                taskId: number;
                documentId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DocumentDTO"];
                };
            };
        };
    };
    getShiftById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ShiftDTO"];
                };
            };
        };
    };
    updateShift: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Shift"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    deleteShift: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getRoleById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDTO"];
                };
            };
        };
    };
    updateRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDTO"];
                };
            };
        };
    };
    deleteRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getFlightById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"];
                };
            };
        };
    };
    updateFlight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Flight"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"];
                };
            };
        };
    };
    deleteFlight: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getEvaluationSessionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationSessionDTO"];
                };
            };
        };
    };
    updateEvaluationSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationSessionDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationSessionDTO"];
                };
            };
        };
    };
    deleteEvaluationSession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getIssueById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationIssueDTO"];
                };
            };
        };
    };
    updateIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationIssueDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationIssueDTO"];
                };
            };
        };
    };
    deleteIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateIssueStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StatusUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationIssueDTO"];
                };
            };
        };
    };
    getEvaluationGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationGroupDTO"];
                };
            };
        };
    };
    updateEvaluationGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationGroupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationGroupDTO"];
                };
            };
        };
    };
    deleteEvaluationGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getDocumentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    updateDocument_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    deleteDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    updateAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachmentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    deleteAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    getAssignmentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    updateAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignmentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    deleteAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    getAirportById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Airport"];
                };
            };
        };
    };
    updateAirport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Airport"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Airport"];
                };
            };
        };
    };
    deleteAirport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"];
                };
            };
        };
    };
    updateActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"];
                };
            };
        };
    };
    deleteActivity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pinActivity: {
        parameters: {
            query: {
                pinned: boolean;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAllUsersResponse"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["User"];
            };
        };
        responses: {
            /** @description User created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiCreateUserResponse"];
                };
            };
        };
    };
    logoutCleanup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    saveExpoPushToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description Expo push token saved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    removeDeviceToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    assignShiftToUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignShiftRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    applyShiftToUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplyShiftMultiDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    applyFlightShift: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplyFlightShiftRequest"];
            };
        };
        responses: {
            /** @description User flight shift applied successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiCreateUserFlightShiftResponse"];
                };
            };
        };
    };
    getAllTeams: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all teams */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAllTeamsResponse"];
                };
            };
        };
    };
    createTeam: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamDTO"];
            };
        };
        responses: {
            /** @description Team created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["TeamDTO"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseTeamDTO"];
                };
            };
        };
    };
    getAllTaskDetails: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAllTasksResponse"];
                };
            };
        };
    };
    createTask: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTaskRequest"];
            };
        };
        responses: {
            /** @description Tạo thành công */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiTaskResponse"];
                };
            };
        };
    };
    attachDocument: {
        parameters: {
            query: {
                taskId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["DocumentDTO"];
                };
            };
        };
    };
    getAllShifts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ShiftDTO"][];
                };
            };
        };
    };
    createShift: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Shift"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    getAllRoles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDTO"][];
                };
            };
        };
    };
    createRole: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RoleDTO"];
                };
            };
        };
    };
    markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllFlights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"][];
                };
            };
        };
    };
    createFlight: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Flight"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"];
                };
            };
        };
    };
    getAllEvaluationSessions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationSessionDTO"][];
                };
            };
        };
    };
    createEvaluationSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationSessionDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationSessionDTO"];
                };
            };
        };
    };
    getAllIssues: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationIssueDTO"][];
                };
            };
        };
    };
    createIssue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationIssueDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationIssueDTO"];
                };
            };
        };
    };
    getAllEvaluationGroups: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationGroupDTO"][];
                };
            };
        };
    };
    createEvaluationGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EvaluationGroupDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationGroupDTO"];
                };
            };
        };
    };
    getAllDocuments: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    createDocument: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Registration successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiRegisterResponse"];
                };
            };
            /** @description Invalid input */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Login successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiLoginResponse"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    getAttachmentsByDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                documentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    addAttachment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                documentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AttachmentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    createAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignmentDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    getAllAirports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Airport"][];
                };
            };
        };
    };
    createAirport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Airport"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Airport"];
                };
            };
        };
    };
    getAllActivities: {
        parameters: {
            query?: {
                name?: string;
                location?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"][];
                };
            };
        };
    };
    createActivity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityDTO"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"];
                };
            };
        };
    };
    addParticipants: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActivityParticipantDTO"][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityParticipantDTO"][];
                };
            };
        };
    };
    removeParticipant: {
        parameters: {
            query: {
                participantType: string;
                participantId: number;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateFlightTimes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlightTimeUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    updateActualTimeAndNotify: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlightTimeUpdateRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    searchUsersByKeyword: {
        parameters: {
            query: {
                keyword: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully searched users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiSearchUsersResponse"];
                };
            };
        };
    };
    getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved current user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiMeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiErrorResponse"];
                };
            };
        };
    };
    filterUsers: {
        parameters: {
            query?: {
                teamId?: number;
                unitId?: number;
                searchText?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully filtered users */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiFilterUsersResponse"];
                };
            };
        };
    };
    getAllUserShifts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["UserShiftDTO"][];
                };
            };
        };
    };
    getSchedulesByCriteria: {
        parameters: {
            query: {
                shiftDate: string;
                teamId?: number;
                unitId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleDTO"][];
                };
            };
        };
    };
    filterByUserAndRange: {
        parameters: {
            query: {
                userId: number;
                startDate: string;
                endDate: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ScheduleDTO"][];
                };
            };
        };
    };
    getAllUserFlightShifts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all user flight shifts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAllUserFlightShiftsResponse"];
                };
            };
        };
    };
    removeFlightAssignment: {
        parameters: {
            query: {
                flightId: number;
                shiftDate: string;
                userId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User flight assignment removed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiDeleteUserFlightShiftResponse"];
                };
            };
        };
    };
    getShiftsByFlightAndDate: {
        parameters: {
            query: {
                flightId: number;
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user flight shifts by flight and date */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUserFlightShiftsByFlightAndDateResponse"];
                };
            };
        };
    };
    getAvailableShifts: {
        parameters: {
            query: {
                flightId: number;
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved available user flight shifts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAvailableUserFlightShiftsResponse"];
                };
            };
        };
    };
    getAssignedShifts: {
        parameters: {
            query: {
                flightId?: number;
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved assigned user flight shifts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAssignedUserFlightShiftsResponse"];
                };
            };
        };
    };
    isUserAssigned: {
        parameters: {
            query: {
                shiftDate: string;
                userId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully checked assignment */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiCheckUserAssignedFlightResponse"];
                };
            };
        };
    };
    getFlightSchedules: {
        parameters: {
            query: {
                shiftDate: string;
                teamId?: number;
                unitId?: number;
                flightId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully filtered user flight shifts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiFilterUserFlightShiftsResponse"];
                };
            };
        };
    };
    filterUserFlightShifts: {
        parameters: {
            query: {
                shiftDate: string;
                teamId?: number;
                unitId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully filtered user flight shifts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiFilterUserFlightShiftsResponse"];
                };
            };
        };
    };
    getShiftsByUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user flight shifts by user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUserFlightShiftsByUserResponse"];
                };
            };
        };
    };
    getShiftsByDate: {
        parameters: {
            query: {
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved user flight shifts by date */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiUserFlightShiftsByDateResponse"];
                };
            };
        };
    };
    getUnits: {
        parameters: {
            query?: {
                teamId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved all units */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiAllUnitsResponse"];
                };
            };
        };
    };
    getNotifications: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notification"][];
                };
            };
        };
    };
    countUnread: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": number;
                };
            };
        };
    };
    getTodayFlights: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"][];
                };
            };
        };
    };
    searchFlights: {
        parameters: {
            query?: {
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"][];
                };
            };
        };
    };
    searchFlightByDate: {
        parameters: {
            query: {
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"][];
                };
            };
        };
    };
    searchFlightByDateAndKeyword: {
        parameters: {
            query: {
                date: string;
                keyword?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"][];
                };
            };
        };
    };
    getLiveTrackingGroup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["FlightDTO"][];
                };
            };
        };
    };
    getIssuesBySession: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sessionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["EvaluationIssueDTO"][];
                };
            };
        };
    };
    getAssignmentsByTaskId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                taskId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    searchActivitiesByMonthYear: {
        parameters: {
            query: {
                month: number;
                year: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"][];
                };
            };
        };
    };
    getActivitiesByDateRange: {
        parameters: {
            query: {
                startDate: string;
                endDate: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"][];
                };
            };
        };
    };
    getActivitiesByDate: {
        parameters: {
            query: {
                date: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"][];
                };
            };
        };
    };
    getPinnedActivities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"][];
                };
            };
        };
    };
    getMyActivities: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ActivityDTO"][];
                };
            };
        };
    };
    home: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Thành công */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ApiResponseCustom"];
                };
            };
        };
    };
    removeDocument: {
        parameters: {
            query: {
                taskId: number;
                documentId: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteNotification: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
